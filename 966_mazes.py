#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 13 16:46:03 2022

@author: Brigette
"""
import matplotlib.pyplot as plt
from simulation import visualize_maze, visualize_path
from mst_prototype import map2tree
import copy

## Maze 1: 
Maze1 = ((3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3),
        (3, 2, 3, 3, 3, 0, 0, 3, 6, 6, 6, 6, 0, 0, 3),
        (3, 6, 6, 6, 3, 0, 0, 3, 6, 3, 3, 3, 0, 0, 3),
        (3, 3, 3, 6, 3, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3),
        (3, 3, 0, 6, 3, 6, 3, 3, 6, 6, 6, 6, 6, 6, 3),
        (3, 3, 0, 6, 3, 6, 3, 3, 6, 0, 0, 3, 3, 6, 3),
        (3, 3, 3, 6, 3, 6, 3, 3, 6, 0, 0, 3, 3, 6, 3),
        (3, 3, 3, 6, 6, 6, 3, 3, 5, 3, 3, 3, 3, 6, 3),
        (3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3),)

## Maze 2: starting point at [2][12]
Maze2 = ((3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3),
        (6, 6, 6, 6, 6, 6, 6, 3, 3, 6, 3, 3, 3),
        (3, 0, 0, 3, 6, 3, 3, 3, 3, 6, 6, 6, 5),
        (3, 3, 3, 3, 6, 3, 3, 3, 3, 6, 3, 3, 3),
        (6, 3, 3, 3, 6, 3, 0, 3, 3, 6, 3, 2, 3),
        (6, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3),
        (6, 6, 6, 3, 3, 0, 0, 3, 3, 3, 6, 3, 3))

## Maze 3: starting point at [0][11]
Maze3 = ((0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3),
        (0, 0, 0, 6, 6, 6, 3, 3, 3, 3, 3, 6, 3),
        (3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 3),
        (3, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3),
        (3, 0, 0, 3, 6, 3, 3, 6, 6, 6, 6, 6, 6),
        (3, 0, 0, 6, 6, 6, 6, 6, 3, 0, 3, 3, 0),
        (3, 3, 3, 3, 3, 6, 3, 3, 0, 0, 3, 3, 0))

## Maze 4: starting point at [6][0]
Maze4 = ((3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0),
        (0, 0, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 0),
        (6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 6, 3),
        (0, 0, 3, 6, 3, 3, 6, 3, 3, 3, 3, 6, 3),
        (0, 3, 3, 6, 3, 3, 6, 6, 6, 6, 6, 6, 3),
        (3, 3, 3, 6, 3, 6, 6, 3, 0, 2, 3, 6, 6),
        (5, 6, 6, 6, 6, 6, 3, 3, 0, 0, 3, 3, 6))

## Maze 5: starting point at [0][1]
Maze5 = ((3, 5, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3),
        (6, 6, 3, 3, 6, 6, 6, 6, 6, 3, 3, 3, 3),
        (6, 3, 3, 6, 6, 3, 3, 6, 3, 3, 6, 0, 0),
        (6, 6, 6, 6, 3, 6, 6, 6, 6, 3, 6, 0, 0),
        (6, 3, 0, 0, 3, 6, 2, 3, 6, 3, 6, 0, 0),
        (6, 6, 6, 6, 6, 6, 3, 3, 6, 6, 6, 6, 6),
        (3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3))

## Maze 6: starting point at [0][6]
Maze6 = ((3, 0, 0, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3),
        (3, 6, 6, 6, 6, 3, 6, 6, 6, 6, 6, 0, 0),
        (3, 3, 6, 3, 6, 6, 6, 3, 3, 3, 3, 0, 0),
        (3, 3, 6, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3),
        (3, 3, 6, 3, 3, 3, 6, 3, 3, 6, 6, 6, 6),
        (0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0, 0),
        (0, 0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 0, 0))

## Maze 7: starting point at [6][0]
Maze7 = ((0, 0, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6),
        (0, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 6),
        (3, 6, 3, 3, 6, 6, 6, 0, 2, 0, 3, 0, 6),
        (6, 6, 3, 6, 6, 3, 6, 0, 0, 0, 3, 3, 6),
        (6, 3, 6, 6, 3, 3, 6, 3, 3, 3, 6, 6, 6),
        (6, 6, 6, 3, 3, 3, 6, 3, 3, 3, 6, 3, 3),
        (5, 3, 3, 3, 0, 6, 6, 6, 6, 6, 6, 3, 3))

## Maze 8: starting point at [6][12]
Maze8 = ((3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 6, 0, 2),
    (0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3),
        (0, 0, 6, 3, 6, 3, 3, 6, 3, 3, 6, 0, 3),
        (3, 3, 6, 3, 6, 3, 3, 6, 3, 3, 6, 0, 3), 
        (3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3),
        (6, 6, 6, 3, 3, 3, 0, 0, 0, 3, 6, 6, 6),
        (6, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 5))

'''mazes with no exit in order to test maze walkthrough ourselves'''
## Maze 11: 
mazes = {
        
# 'Maze11' : ((3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3),
#         (3, 0, 3, 3, 3, 0, 0, 3, 6, 6, 6, 6, 0, 0, 3),
#         (3, 6, 6, 6, 3, 0, 0, 3, 6, 3, 3, 3, 0, 0, 3),
#         (3, 3, 3, 6, 3, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3),
#         (3, 3, 0, 6, 3, 6, 3, 3, 6, 6, 6, 6, 6, 6, 3),
#         (3, 3, 0, 6, 3, 6, 3, 3, 6, 0, 0, 3, 3, 6, 3),
#         (3, 3, 3, 6, 3, 6, 3, 3, 6, 0, 0, 3, 3, 6, 3),
#         (3, 3, 3, 6, 6, 6, 3, 3, 5, 3, 3, 3, 3, 6, 3),
#         (3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3),),

# Maze 21: starting point at [2][12]
'Maze21' : ((3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3),
        (3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3, 3),
        (3, 6, 6, 6, 6, 6, 6, 6, 3, 3, 6, 3, 3, 3, 3),
        (3, 3, 0, 0, 3, 6, 3, 3, 3, 3, 6, 6, 6, 5, 3),
        (3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 6, 3, 3, 3, 3),
        (3, 6, 3, 3, 3, 6, 3, 0, 3, 3, 6, 3, 0, 3, 3),
        (3, 6, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3),
        (3, 6, 6, 6, 3, 3, 0, 0, 3, 3, 3, 6, 3, 3, 3),
        (3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3),)

# ## Maze 31: starting point at [0][11]
# 'Maze31' : ((0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3),
#         (0, 0, 0, 6, 6, 6, 3, 3, 3, 3, 3, 6, 3),
#         (3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 3),
#         (3, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3),
#         (3, 0, 0, 3, 6, 3, 3, 6, 6, 6, 6, 6, 6),
#         (3, 0, 0, 6, 6, 6, 6, 6, 3, 0, 3, 3, 0),
#         (3, 3, 3, 3, 3, 6, 3, 3, 0, 0, 3, 3, 0)),

# ## Maze 41: starting point at [6][0]
# 'Maze41': ((3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0),
#         (0, 0, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 0),
#         (6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 6, 3),
#         (0, 0, 3, 6, 3, 3, 6, 3, 3, 3, 3, 6, 3),
#         (0, 3, 3, 6, 3, 3, 6, 6, 6, 6, 6, 6, 3),
#         (3, 3, 3, 6, 3, 6, 6, 3, 0, 0, 3, 6, 6),
#         (5, 6, 6, 6, 6, 6, 3, 3, 0, 0, 3, 3, 6)),

# ## Maze 51: starting point at [0][1]
# 'Maze51' : ((3, 5, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3),
#         (6, 6, 3, 3, 6, 6, 6, 6, 6, 3, 3, 3, 3),
#         (6, 3, 3, 6, 6, 3, 3, 6, 3, 3, 6, 0, 0),
#         (6, 6, 6, 6, 3, 6, 6, 6, 6, 3, 6, 0, 0),
#         (6, 3, 0, 0, 3, 6, 0, 3, 6, 3, 6, 0, 0),
#         (6, 6, 6, 6, 6, 6, 3, 3, 6, 6, 6, 6, 6),
#         (3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3)),

# ## Maze 61: starting point at [0][6]
# 'Maze61' : ((3, 0, 0, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3),
#         (3, 6, 6, 6, 6, 3, 6, 6, 6, 6, 6, 0, 0),
#         (3, 3, 6, 3, 6, 6, 6, 3, 3, 3, 3, 0, 0),
#         (3, 3, 6, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3),
#         (3, 3, 6, 3, 3, 3, 6, 3, 3, 6, 6, 6, 6),
#         (0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0, 0),
#         (0, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0)),


# ## Maze 71: starting point at [6][0]
# 'Maze71' : ((0, 0, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6),
#         (0, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 6),
#         (3, 6, 3, 3, 6, 6, 6, 0, 0, 0, 3, 0, 6),
#         (6, 6, 3, 6, 6, 3, 6, 0, 0, 0, 3, 3, 6),
#         (6, 3, 6, 6, 3, 3, 6, 3, 3, 3, 6, 6, 6),
#         (6, 6, 6, 3, 3, 3, 6, 3, 3, 3, 6, 3, 3),
#         (5, 3, 3, 3, 0, 6, 6, 6, 6, 6, 6, 3, 3)),

# ## Maze 81: starting point at [6][12]
# 'Maze81': ((3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0),
#         (0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3),
#         (0, 0, 6, 3, 6, 3, 3, 6, 3, 3, 6, 0, 3),
#         (3, 3, 6, 3, 6, 3, 3, 6, 3, 3, 6, 0, 3), 
#         (3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3),
#         (6, 6, 6, 3, 3, 3, 0, 0, 0, 3, 6, 6, 6),
#         (6, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 5))

}

# mazes = [
#     Maze1, Maze2, Maze3, Maze4, Maze5, Maze6, Maze7, Maze8
# ]

# mazes_hidden_exit = [ Maze11, Maze21, Maze31, Maze41, Maze51, Maze61, Maze71, Maze81]


    
    ##Visualizations of our test mazes 
    # for maze in mazes:
    #     _, axs = plt.subplots(1, 1)
    #     visualize_maze(maze, axs)
    #     plt.show()

    # for maze in mazes_hidden_exit:
    #     _, axs = plt.subplots(1, 1)
    #     visualize_maze(maze, axs)
    #     plt.show()

def update_decisions():
    tuple_decisions = { 
                'P1': {
                        'Maze1': {'path': [(6, 7), (5, 7), (0, 10), (2, 5), (4, 2), (1, 0)]},
                        'Maze2': {'path': [(2, 12), (5, 11)]},
                        'Maze3': {'path': [(0, 11), (1, 3)]},
                        'Maze4': {'path': [(6, 0), (2, 1), (1, 11), (4, 9)]},
                        'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
                        'Maze7': {'path': [(0, 6), (1, 10), (4, 11), (5, 8)]},
                        'Maze7': {'path': [(6, 0), (2, 6)]},
                        'Maze8': {'path': [(6, 12), (4, 8), (3, 10), (0, 11)]},
                }
            }

    for maze in tuple_decisions['P1']:
        for elem in tuple_decisions['P1'][maze]['path']:
            elem = (elem[0]+1,elem[1]+1)

    return tuple_decisions

def get_decisions():

    tree_memo = {}
    tuple_decisions = { 
            'P1': {
                    #'Maze11': {'path': [(7, 8), (6, 8), (1, 11), (3, 6), (5, 3), (2, 1)]}
                    'Maze21': {'path': [(3, 13), (6, 12)]},
                    # 'Maze3': {'path': [(0, 11), (1, 3)]},
                    # 'Maze4': {'path': [(6, 0), (2, 1), (1, 11), (4, 9)]},
                    # 'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
                    # 'Maze7': {'path': [(0, 6), (1, 10), (4, 11), (5, 8)]},
                    # 'Maze7': {'path': [(6, 0), (2, 6)]},
                    # 'Maze8': {'path': [(6, 12), (4, 8), (3, 10), (0, 11)]},
            }, }

            # 'P2':{
            #     'Maze1': {'path': [(6, 7), (5, 7), (0, 10), (2, 5), (4, 2), (1, 0)]},
            #     'Maze2': {'path': [(2, 12), (5, 11)]},
            #     'Maze3': {'path': [(0, 11), (1, 3)]},
            #     'Maze4': {'path': [(6, 0), (2, 1), (1, 11), (4, 9)]},
            #     'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
            #     'Maze6': {'path': [(0, 6), (1, 10), (4, 11), (5, 8)]},
            #     'Maze7': {'path': [(6, 0), (1, 1), (2, 12), (6, 5), (2, 6)]},
            #     'Maze8': {'path': [(6, 12), (3, 10), (0, 10)]},
            # },

            # 'P3':{
            #     'Maze1': {'path': [(6, 7), (5, 7) (0, 10), (2, 5), (4, 2), (1, 0)]},
            #     'Maze2': {'path': [(2, 12), (5, 11)]},
            #     'Maze3': {'path': [(0, 11), (1, 3)]},
            #     'Maze4': {'path': [(6, 0), (2, 1), (4, 9)]},
            #     'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
            #     'Maze6': {'path': [(0, 6), (1, 10), (4, 11), (5, 8)]},
            #     'Maze7': {'path': [(6, 0), (1, 1), (2, 6)]},
            #     'Maze8': {'path': [(6, 12), (4, 8), (3, 10), (0, 10)]},
            # },

            # 'P4': {
            #     'Maze1': {'path': [(6, 7), (5, 7), (2, 5), (0, 10), (4, 2), (1, 0)]},
            #     'Maze2': {'path': [(2, 12), (5, 11)]},
            #     'Maze3': {'path': [(0, 11), (5, 3), (1,3)]},
            #     'Maze4': {'path': [(6, 0), (4, 9)]},
            #     'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
            #     'Maze6': {'path': [(0, 6), (1, 10), (5, 8)]},
            #     'Maze7': {'path': [(6, 0), (6, 2)]},
            #     'Maze8': {'path': [(6, 12), (3, 10), (0, 10)]},
            # },

            # 'P5': {
            #     'Maze1': {'path': [(6, 7), (5, 7), (0, 10), (2, 5), (4, 2), (1, 0)]},
            #     'Maze2': {'path': [(2, 12), (5, 11)]},
            #     'Maze3': {'path': [(0, 11), (1, 3)]},
            #     'Maze4': {'path': [(6, 0), (2, 1), (4, 8)]},
            #     'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
            #     'Maze6': {'path': [(0, 6), (1, 2), (5, 2), (5, 8)]},
            #     'Maze7': {'path': [(6, 0), (2, 6)]},
            #     'Maze8': {'path': [(6, 12), (4, 8), (3, 10), (0, 10)]}
            # },

            # 'P6': {
            #     'Maze1': {'path': [(6, 7), (5, 7) (0, 10), (2, 5), (4, 2), (1, 0)]},
            #     'Maze2': {'path': [(2, 12), (5, 11)]},
            #     'Maze3': {'path': [(0, 11), (1, 3)]},
            #     'Maze4': {'path': [(6, 0), (2, 1), (1, 11), (4, 9)]},
            #     'Maze5': {'path': [(0, 1), (5, 2), (5, 3), (4, 5)]},
            #     'Maze6': {'path': [(0, 6), (1, 10), (4, 11), (5, 8)]},
            #     'Maze7': {'path':[(6, 0), (1, 1), (2, 6)]},
            #     'Maze8': {'path':[ (6, 12), (4, 8), (3, 10), (0, 10)]},
            # }  
    #}   

    #create dict in the form # {sid: {world: {'nodes': [], 'path': []}}}
    final_decisions_dict = copy.deepcopy(tuple_decisions)

    for p in final_decisions_dict:
            for maze in final_decisions_dict[p]:
                    actual_maze = mazes[maze]
                    if actual_maze not in tree_memo.keys():
                        tree = map2tree(actual_maze)
                        tree_memo[maze] = tree

                        
            #obtain the path for a specific maze given a specific person
            path = final_decisions_dict[p][maze]
            node_path = []
            for step in path['path']:
                for x in tree_memo[maze].keys(): # 0, 1 ,2, ... node value
                        if step == tree_memo[maze][x]['pos']:
                            node_path.append(x)
                            break
            
            final_decisions_dict[p]['nodes'] = node_path

    return final_decisions_dict


if __name__ == "__main__":
    get_decisions()
#     print(p1_decision)
#     p1_path = p1_decisions['P1']['Maze11']['path']
#     print(p1_path)

#     _, ax_11 = plt.subplots(1, 1)
#     visualize_maze(Maze11, ax_11)
#     visualize_path(Maze11, p1_path, ax_11)
#     plt.show()



    
